// <auto-generated />
using System;
using JwtAuth.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JwtAuth.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("JwtAuth.DAL.Entities.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires_at");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<byte[]>("ValueHash")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("value_hash");

                    b.Property<byte[]>("ValueSalt")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("value_salt");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("OwnerId");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("JwtAuth.DAL.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            FirstName = "John",
                            LastName = "Doe",
                            PasswordHash = new byte[] { 113, 37, 9, 78, 97, 203, 134, 230, 56, 123, 217, 43, 43, 145, 21, 74, 88, 87, 181, 42, 242, 37, 125, 97, 221, 117, 126, 6, 198, 206, 127, 196, 162, 1, 218, 163, 187, 166, 111, 200, 176, 173, 131, 107, 148, 204, 29, 101, 181, 51, 202, 43, 135, 132, 28, 153, 204, 36, 251, 247, 30, 151, 29, 25 },
                            PasswordSalt = new byte[] { 213, 106, 229, 84, 147, 34, 85, 3, 101, 208, 96, 40, 48, 169, 223, 21, 158, 100, 238, 47, 96, 171, 255, 82, 145, 186, 69, 76, 133, 79, 155, 49, 227, 57, 39, 225, 7, 31, 99, 58, 70, 194, 71, 164, 107, 250, 115, 174, 63, 179, 109, 17, 221, 154, 152, 117, 123, 69, 216, 55, 19, 109, 255, 100, 69, 88, 237, 169, 1, 243, 234, 6, 44, 134, 81, 172, 128, 22, 211, 88, 23, 118, 39, 254, 137, 219, 186, 22, 135, 0, 227, 205, 98, 115, 229, 54, 96, 213, 16, 154, 207, 50, 42, 208, 199, 98, 49, 143, 217, 198, 250, 164, 30, 161, 241, 177, 205, 144, 112, 135, 102, 223, 106, 43, 215, 241, 202, 2 },
                            Role = "Admin",
                            Username = "johndoe"
                        });
                });

            modelBuilder.Entity("JwtAuth.DAL.Entities.RefreshToken", b =>
                {
                    b.HasOne("JwtAuth.DAL.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });
#pragma warning restore 612, 618
        }
    }
}
